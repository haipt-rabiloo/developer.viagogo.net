## User-Login Authentication Flow

[oauth2]: http://oauth.net/2/
[authorizationcode]: http://tools.ietf.org/html/rfc6749#section-1.3.1

Applications can use the [authorization code grant type][authorizationcode] of
the [OAuth2 specification][oauth2] to obtain an access token by redirecting a
user to viagogo and having them authorize your application. Access tokens
obtained using this grant type will provide access to user-specific data
(purchases, sales, seller-listings, etc) as well as public, non-user-specific
data (events, listings, etc).

> **Authorization Endpoint:** `https://account.viagogo.com/authorize`

### 1. Obtain user's consent

~~~ shell
curl -X GET "https://account.viagogo.com/authorize?client_id=clientId&response_type=code&redirect_uri=https://myapp.com/callback&scope=read:user%20write:user&state=12345"
~~~

~~~ csharp
var api = new ViagogoClient("clientId",
                            "clientSecret",
                            new ProductHeaderValue("MyAwesomeApp"));

// Redirect the user's user agent to this URL
var authorizationUrl = await api.OAuth2.GetAuthorizationUrl(
                            new Uri("https://myapp.com/callback"),
                            new[] { "read:user", "write:user" },
                            "12345");
~~~

You obtain a user's consent to make API calls on their behalf by redirecting
their user agent (browser, webview, etc) to the authorization endpoint with the
parameters listed below.

### HTTP Request

`GET https://account.viagogo.com/authorize`

### Parameters

| **Name** | **Type** | **Description** |
| -------- | -------- | --------------- |
| `client_id` | `string` | *Required* Unique client identifier obtained through the application registration process |
| `response_type` | `string` | Set to `code` to request that an authorization code be sent back to the application return URL |
| `redirect_uri` | `string` | Application callback URL where the authorization code is sent. This must match the URL registered for your application |
| `scope` | `string` | Space-delimited string of the [scopes](#scopes) you would like |
| `state` | `string` | An opaque value used to maintain state between the authorize request and the callback |


<aside class="notice">
  <strong><code>redirect_uri</code> must be SSL</strong>
  <p>OAuth2 is only secure if it is used over SSL so your callback URL
must use HTTPs.</p>
</aside>

### 2. Process the authorize callback

Once the user authorizes your application, viagogo redirects (`HTTP 302`) the
user's user-agent to the return URL with the authorization code appended in the
`code` query parameter.

### 3. Obtain an access token

~~~ shell
curl -X POST "https://account.viagogo.com/oauth2/token"
  -u "clientId:clientSecret" --basic
  -H "Content-Type: application/x-www-form-urlencoded"
  -d "grant_type=authorization_code"
  -d "code=cddgafgfvawe"
  --data-urlencode "redirect_uri=https://myapp.com/callback"
  --data-urlencode "scope=read:user write:user"
~~~

~~~ csharp
var token = await _viagogoClient.OAuth2.GetAuthorizationCodeAccessTokenAsync(
                                          "cddgafgfvawe",
                                          new Uri("https://myapp.com/callback"),
                                          new[] { "read:user", "write:user" });
~~~

~~~ ruby
# TODO
~~~

~~~ php
// TODO
~~~

~~~ python
# TODO
~~~

<%= json(:access_token) %>

The authorization code received above can then be exchanged for an access token.

#### HTTP Request

`POST https://account.viagogo.com/oauth2/token`

#### Headers

| **Name** | **Value** |
| -------- | --------- |
| `Authorization` | Basic {value from step 1} |
| `Content-Type` | `application/x-www-form-urlencoded` |

#### Parameters

| **Name** | **Type** | **Description** |
| -------- | -------- | --------------- |
| `grant_type` | `string` | *Required*. Value should be `authorization_code` |
| `code` | `string` | The authorization code that was sent to your application's return URL |
| `redirect_uri` | `string` | Application callback URL where the authorization code is sent. This must match the URL registered for your application |
| `scope` | `string` | Space-delimited string of the [scopes](#scopes) you would like. |
