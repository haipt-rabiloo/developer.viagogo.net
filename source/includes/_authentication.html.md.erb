# Authentication

[oauth2]: http://oauth.net/2/

The viagogo API uses [OAuth2][oauth2] for all authentication.
OAuth2 is a protocol that lets external applications access public viagogo
resources and private viagogo user details without getting their password.

All developers need to [register their application](#) before getting started.
Registered applications are assigned a unique Client ID and Client Secret that
are required for authentication.

<aside class="notice">
  <strong>Tokens are passwords.</strong>
  <p>Keep in mind that your application's Client ID and Client Secret and all
access tokens should be considered as sensitive as passwords and should not be
shared.</p>
</aside>

<aside class="notice">
  <strong>SSL absolutely required</strong>
  <p>OAuth2 is only secure if it is used over SSL so all requests to
authentication and API endpoints must use HTTPs.</p>
</aside>


## Getting Access Tokens

In order to make authenticated requests to the viagogo API, your application
must first obtain an OAuth access token. The way you obtain an access token
depends on your use case.

| **If you...** | **Use...** |
| ------------- | ---------- |
| Want to access public data like categories, events and listings... | [Client Credentials Grant](#client-credentials-grant) |
| Want to manage user-specific data like payment methods, listings, purchases and sales... | [Authorization Code Grant](#authorization-code-grant) |
| Have an access token for a user and want to get another access token... | [Refresh Token Grant](#refresh-token-grant) |


## Client Credentials Grant

Applications can use the client credentials grant to get an access token that
will provide access to public, non-user-specific data (events, listings, etc).

~~~ shell
curl -X POST "https://account.viagogo.com/oauth2/token"
  -u "clientId:clientSecret" --basic
  -H "Content-Type: application/x-www-form-urlencoded"
  -d "grant_type=client_credentials"
~~~

~~~ csharp
var api = new ViagogoClient("clientId",
                            "clientSecret",
                            new ProductHeaderValue("MyAwesomeApp"));
var token = await api.OAuth2.GetClientAccessTokenAsync();
~~~

~~~ ruby
api = GogoKit::Client.new(client_id: CLIENT_ID, client_secret: CLIENT_SECRET)
token = api.get_client_access_token
~~~

### 1. Create a Basic Authorization header

[rfc1738]: http://www.ietf.org/rfc/rfc1738.txt

* URL encode your application's client id and client secret according to
[RFC 1738][rfc1738]
* Concatenate the encoded client id, a colon character “:” and the encoded
consumer secret into a single string
* Base64 encode the string from the previous step

<%= json(:client_credentials_token) %>

### 2. Obtain an access token

* The value calculated in [Step 1](#create-a-basic-authorization-header) must be
exchanged for an access token:

### HTTP Request

`POST https://account.viagogo.com/oauth2/token`

### Headers

| **Name** | **Value** |
| -------- | --------- |
| `Authorization` | Basic {value from step 1} |
| `Content-Type` | `application/x-www-form-urlencoded` |

### Parameters

| **Name** | **Type** | **Description** |
| -------- | -------- | --------------- |
| `grant_type` | `string` | *Required*. Value should be `client_credentials` |
| `scope` | `string` | Space-delimited string of the [scopes](#scopes) you would like. |


## Authorization Code Grant

The authorization code grant allows your application to obtain an access token
by redirecting a user to viagogo and having them authorize your application.
Access tokens obtained using this grant type will provide access to
user-specific data (purchases, sales, listings, etc) as well as public,
non-user-specific data (events, listings, etc).

> **Authorization Endpoint:** `https://account.viagogo.com/authorize`

### 1. Obtain user's consent

~~~ shell
curl -X GET "https://account.viagogo.com/authorize?client_id=clientId&response_type=code&redirect_uri=https://myapp.com/callback&scope=read:user%20write:user&state=12345"
~~~

~~~ csharp
var api = new ViagogoClient("clientId",
                            "clientSecret",
                            new ProductHeaderValue("MyAwesomeApp"));

// Redirect the user's user agent to this URL
var authorizationUrl = await api.OAuth2.GetAuthorizationUrl(
                            new Uri("https://myapp.com/callback"),
                            new[] { "read:user", "write:user" },
                            "12345");
~~~

You obtain a user's consent to make API calls on their behalf by redirecting
their user agent (browser, webview, etc) to the authorization endpoint with the
parameters listed below.

### HTTP Request

`GET https://account.viagogo.com/authorize`

### Parameters

| **Name** | **Type** | **Description** |
| -------- | -------- | --------------- |
| `client_id` | `string` | *Required* Unique client identifier obtained through the application registration process |
| `response_type` | `string` | Set to `code` to request that an authorization code be sent back to the application return URL |
| `redirect_uri` | `string` | Application callback URL where the authorization code is sent. This must match the URL registered for your application |
| `scope` | `string` | Space-delimited string of the [scopes](#scopes) you would like |
| `state` | `string` | An opaque value used to maintain state between the authorize request and the callback |


<aside class="notice">
  <strong><code>redirect_uri</code> must be SSL</strong>
  <p>OAuth2 is only secure if it is used over SSL so your callback URL
must use HTTPs.</p>
</aside>

### 2. Process the authorize callback

Once the user authorizes your application, viagogo redirects (`HTTP 302`) the
user's user-agent to the return URL with the authorization code appended in the
`code` query parameter.

### 3. Obtain an access token

~~~ shell
curl -X POST "https://account.viagogo.com/oauth2/token"
  -u "clientId:clientSecret" --basic
  -H "Content-Type: application/x-www-form-urlencoded"
  -d "grant_type=authorization_code"
  -d "code=cddgafgfvawe"
  --data-urlencode "https://myapp.com/callback"
  --data-urlencode "scope=read:user write:user"
~~~

~~~ csharp
var token = await _viagogoClient.OAuth2.GetAuthorizationCodeAccessTokenAsync(
                                          "cddgafgfvawe",
                                          new Uri("https://myapp.com/callback"),
                                          new[] { "read:user", "write:user" });
~~~

~~~ ruby
# TODO
~~~

~~~ php
// TODO
~~~

~~~ python
# TODO
~~~

<%= json(:access_token) %>

The authorization code received above can then be exchanged for an access token.

### HTTP Request

`POST https://account.viagogo.com/oauth2/token`

### Headers

| **Name** | **Value** |
| -------- | --------- |
| `Authorization` | Basic {value from step 1} |
| `Content-Type` | `application/x-www-form-urlencoded` |

### Parameters

| **Name** | **Type** | **Description** |
| -------- | -------- | --------------- |
| `grant_type` | `string` | *Required*. Value should be `authorization_code` |
| `code` | `string` | The authorization code that was sent to your application's return URL |
| `redirect_uri` | `string` | Application callback URL where the authorization code is sent. This must match the URL registered for your application |
| `scope` | `string` | Space-delimited string of the [scopes](#scopes) you would like. |


## Refresh Token Grant

Applications can use the refresh token grant to obtain additional access tokens
in order to prolong the application's access to a user's data.

### 1. Obtain an access token

Use the [Authorization Code Grant Type](#authorization-code-grant-type) to
obtain an initial access token.

### 2. Use the refresh token to obtain a new access token

~~~ shell
curl -X POST "https://account.viagogo.com/oauth2/token"
  -u "clientId:clientSecret" --basic
  -H "Content-Type: application/x-www-form-urlencoded"
  -d "grant_type=refresh_token"
  -d "refresh_token=<%= ACCESS_TOKEN["refresh_token"]%>"
  --data-urlencode "scope=read:user write:user"
~~~

~~~ csharp
var token = await _viagogoClient.OAuth2.RefreshAccessTokenAsync(oldToken);
~~~

~~~ ruby
# TODO
~~~

~~~ php
// TODO
~~~

~~~ python
# TODO
~~~

<%= json(:refresh_grant_access_token) %>

The refresh token from the previous access token can be exchanged for new one.

### HTTP Request

`POST https://account.viagogo.com/oauth2/token`

### Headers

| **Name** | **Value** |
| -------- | --------- |
| `Authorization` | Basic {value from step 1} |
| `Content-Type` | `application/x-www-form-urlencoded` |

### Parameters

| **Name** | **Type** | **Description** |
| -------- | -------- | --------------- |
| `grant_type` | `string` | *Required*. Value should be `refresh_token` |
| `refresh_token` | `string` | The refresh token received with a previous access token |
| `scope` | `string` | Space-delimited string of the [scopes](#scopes) you would like |


## Authenticating API requests with Access Tokens

<%= curl('GET', 'https://api.viagogo.net/v2/search?query=lady%20gaga') %>

~~~ csharp
var api = new ViagogoClient("clientId",
                            "clientSecret",
                            new ProductHeaderValue("MyAwesomeApp"));
var token = await api.OAuth2.GetClientAccessTokenAsync();
await api.TokenStore.SetTokenAsync(token);

var searchResults = await api.Search.GetAllAsync("lady gaga");
~~~

~~~ ruby
api = GogoKit::Client.new(client_id: CLIENT_ID, client_secret: CLIENT_SECRET)
token = api.get_client_access_token
api.access_token = token.access_token

search_results = api.search 'lady gaga'
~~~

~~~ php
$api = new Viagogo\ViagogoClient($clientId, $clientSecret);
$api->setToken($api->getOAuthClient()->getClientAccessToken());

root = api->getHalClient()->getRoot()
~~~

~~~ python
api = ViagogoClient(YOUR_CLIENT_ID, YOUR_CLIENT_SECRET)
api.set_token(api.oauth.get_client_access_token())

root = api.hal.get_root()
~~~

Access tokens should be included in a `Bearer` authorization header when making
API requests. The `expires_in` property in a token response represents the
number of seconds before the token expires. Tokens can be re-used in multiple
requests up until they expire.


## Scopes

Scopes allow your applications to specify exactly what type of access is needed.

| **Name** | **Description** |
| -------- | --------------- |
| `(no scope)` | Grants read-only access to public information like events, listings. |
| `read:user` | Grants read access to the user’s account information, addresses, payment methods, purchases and sales. |
| `write:user` | Grants write access to the user’s account information, addresses, payment methods and sales. |
| `write:purchases` | Grants write access to the user's purchases. This allows users to use your application to purchase listings. |
| `read:sellerlistings` | Grants read access to the user’s listings. |
| `write:sellerlistings` | Grants write access to the user’s listings. This allows users to use your application to create and update listings. |
| `read:webhooks` | Grants read access to the user’s webhooks. |
| `write:webhooks` | Grants write access to the user’s webhooks. |
| `write:requestedevents` | Grants write access to the user's requested events. This allows users to use your application to request an event to be added to the viagogo platform. |